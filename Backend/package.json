{
  "name": "lib-marketplace-backend",
  "version": "1.0.0",
  "description": "Backend API for LIB MARKETPLACE - Multi-vendor marketplace with secure verification",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest",
    "lint": "eslint .",
    "format": "prettier --write ."
  },
  "keywords": ["marketplace", "e-commerce", "multi-vendor", "api"],
  "author": "reviveshine",
  "license": "MIT",
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cloudinary": "^1.40.0",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "express-rate-limit": "^6.10.0",
    "express-validator": "^7.0.1",
    "helmet": "^7.0.0",
    "mongoose": "^7.5.0",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "nodemailer": "^6.9.4",
    "jsonwebtoken": "^9.0.2",
    "socket.io": "^4.7.2"
  },
  "devDependencies": {
    "@types/node": "^20.5.0",
    "eslint": "^8.47.0",
    "jest": "^29.6.2",
    "nodemon": "^3.0.1",
    "prettier": "^3.0.2"
  },
  "engines": {
    "node": ">=16.0.0"
  },
  "config": {
    "database": {
      "MONGODB_URI": "mongodb://localhost:27017/lib-marketplace"
    },
    "jwt": {
      "JWT_SECRET": "your_super_secret_jwt_key_here",
      "JWT_EXPIRES_IN": "7d"
    },
    "server": {
      "PORT": 5000,
      "NODE_ENV": "development",
      "FRONTEND_URL": "http://localhost:3000"
    },
    "email": {
      "EMAIL_HOST": "smtp.gmail.com",
      "EMAIL_PORT": 587,
      "EMAIL_USER": "your-email@gmail.com",
      "EMAIL_PASS": "your-app-password"
    },
    "cloudinary": {
      "CLOUDINARY_CLOUD_NAME": "your_cloudinary_cloud_name",
      "CLOUDINARY_API_KEY": "your_cloudinary_api_key",
      "CLOUDINARY_API_SECRET": "your_cloudinary_api_secret"
    },
    "twilio": {
      "TWILIO_ACCOUNT_SID": "your_twilio_account_sid",
      "TWILIO_AUTH_TOKEN": "your_twilio_auth_token",
      "TWILIO_PHONE_NUMBER": "your_twilio_phone_number"
    },
    "admin": {
      "ADMIN_EMAIL": "admin@libmarketplace.com",
      "ADMIN_PASSWORD": "admin123456"
    }
  },
  "middleware": {
    "auth": "const jwt = require('jsonwebtoken');\nconst User = require('../models/User');\n\nconst auth = async (req, res, next) => {\n  try {\n    const token = req.header('Authorization')?.replace('Bearer ', '');\n    \n    if (!token) {\n      return res.status(401).json({\n        success: false,\n        message: 'No token provided, authorization denied'\n      });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.userId).select('-password');\n    \n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        message: 'User not found, authorization denied'\n      });\n    }\n\n    if (!user.isActive) {\n      return res.status(401).json({\n        success: false,\n        message: 'Account deactivated, authorization denied'\n      });\n    }\n\n    req.user = decoded;\n    req.userDoc = user;\n    next();\n  } catch (error) {\n    console.error('Auth middleware error:', error);\n    res.status(401).json({\n      success: false,\n      message: 'Invalid token, authorization denied'\n    });\n  }\n};\n\n// Role-based authorization\nconst authorize = (...roles) => {\n  return (req, res, next) => {\n    if (!roles.includes(req.userDoc.role)) {\n      return res.status(403).json({\n        success: false,\n        message: 'Access denied - insufficient permissions'\n      });\n    }\n    next();\n  };\n};\n\nmodule.exports = { auth, authorize };",
    "emailService": "const nodemailer = require('nodemailer');\n\nclass EmailService {\n  constructor() {\n    this.transporter = nodemailer.createTransporter({\n      host: process.env.EMAIL_HOST,\n      port: process.env.EMAIL_PORT,\n      secure: false,\n      auth: {\n        user: process.env.EMAIL_USER,\n        pass: process.env.EMAIL_PASS\n      }\n    });\n  }\n\n  async sendVerificationEmail(email, firstName) {\n    const mailOptions = {\n      from: `\"LIB MARKETPLACE\" <${process.env.EMAIL_USER}>`,\n      to: email,\n      subject: 'Welcome to LIB MARKETPLACE - Verify Your Email',\n      html: `\n        <div style=\\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\\">\n          <div style=\\"background: linear-gradient(135deg, #1E3A8A 0%, #DC143C 100%); color: white; padding: 30px; text-align: center;\\">\n            <h1>Welcome to LIB MARKETPLACE</h1>\n          </div>\n          <div style=\\"padding: 30px; background-color: #f8f9fa;\\">\n            <h2 style=\\"color: #1E3A8A;\\">Hello ${firstName}!</h2>\n            <p>Thank you for joining LIB MARKETPLACE. Please verify your email address to complete your registration.</p>\n            <div style=\\"text-align: center; margin: 30px 0;\\">\n              <a href=\\"${process.env.FRONTEND_URL}/verify-email\\" \n                 style=\\"background-color: #DC143C; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold;\\">\n                Verify Email Address\n              </a>\n            </div>\n            <p>If you didn't create this account, please ignore this email.</p>\n          </div>\n          <div style=\\"background-color: #1E3A8A; color: white; padding: 20px; text-align: center;\\">\n            <p>&copy; 2025 LIB MARKETPLACE. All rights reserved.</p>\n          </div>\n        </div>\n      `\n    };\n\n    try {\n      await this.transporter.sendMail(mailOptions);\n      console.log('Verification email sent successfully');\n    } catch (error) {\n      console.error('Email sending failed:', error);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = new EmailService();"
  },
  "readme": "# LIB MARKETPLACE - Backend API\n\nModern, secure backend API for the LIB MARKETPLACE multi-vendor platform.\n\n## üöÄ Features\n\n- **Secure Authentication**: JWT-based authentication with bcrypt password hashing\n- **User Management**: Buyer, seller, and admin roles with KYC verification\n- **Product Management**: Full CRUD operations for products with image uploads\n- **Real-time Chat**: Socket.io integration for buyer-seller communication\n- **Email Verification**: Automated email verification system\n- **Admin Dashboard**: Complete user and product management\n- **Rate Limiting**: API protection against abuse\n- **Data Validation**: Comprehensive input validation and sanitization\n\n## üõ†Ô∏è Tech Stack\n\n- **Runtime**: Node.js\n- **Framework**: Express.js\n- **Database**: MongoDB with Mongoose ODM\n- **Authentication**: JWT + bcrypt\n- **File Upload**: Multer + Cloudinary\n- **Email**: Nodemailer\n- **Real-time**: Socket.io\n- **Security**: Helmet, CORS, Rate limiting\n\n## üì¶ Installation\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Copy environment variables:\n   ```bash\n   cp .env.example .env\n   ```\n\n4. Update `.env` file with your configurations\n\n5. Start the development server:\n   ```bash\n   npm run dev\n   ```\n\n## üîß Environment Variables\n\n```env\n# Database\nMONGODB_URI=mongodb://localhost:27017/lib-marketplace\n\n# JWT\nJWT_SECRET=your_super_secret_jwt_key_here\nJWT_EXPIRES_IN=7d\n\n# Server\nPORT=5000\nNODE_ENV=development\nFRONTEND_URL=http://localhost:3000\n\n# Email Configuration\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=587\nEMAIL_USER=your-email@gmail.com\nEMAIL_PASS=your-app-password\n```\n\n## üìö API Endpoints\n\n### Authentication\n- `POST /api/auth/register` - Register new user\n- `POST /api/auth/login` - User login\n- `GET /api/auth/me` - Get current user\n\n### Users\n- `GET /api/users/profile` - Get user profile\n- `PUT /api/users/profile` - Update user profile\n- `POST /api/users/verify-email` - Verify email address\n\n### Products\n- `GET /api/products` - Get all products\n- `POST /api/products` - Create new product (seller only)\n- `GET /api/products/:id` - Get product by ID\n- `PUT /api/products/:id` - Update product (seller only)\n- `DELETE /api/products/:id` - Delete product (seller only)\n\n### KYC\n- `POST /api/kyc/upload` - Upload KYC documents\n- `GET /api/kyc/status` - Get KYC verification status\n\n### Admin\n- `GET /api/admin/users` - Get all users (admin only)\n- `PUT /api/admin/users/:id/verify` - Verify user KYC (admin only)\n\n## üîí Security Features\n\n- Password hashing with bcrypt\n- JWT token authentication\n- Rate limiting on API endpoints\n- Input validation and sanitization\n- CORS protection\n- Helmet security headers\n- Environment variable protection\n\n## üöÄ Deployment\n\n1. Set up MongoDB database\n2. Configure environment variables\n3. Deploy to your preferred platform (Heroku, AWS, DigitalOcean, etc.)\n4. Set up reverse proxy (Nginx) if needed\n\n## üìù License\n\nMIT License - see [LICENSE](../LICENSE) file for details.\n\n---\n\n**Developer**: @reviveshine  \n**Created**: July 18, 2025"
}
